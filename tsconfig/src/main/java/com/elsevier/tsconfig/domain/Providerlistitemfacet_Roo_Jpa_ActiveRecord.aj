// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.elsevier.tsconfig.domain;

import com.elsevier.tsconfig.domain.Providerlistitemfacet;
import java.math.BigDecimal;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Providerlistitemfacet_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager Providerlistitemfacet.entityManager;
    
    public static final EntityManager Providerlistitemfacet.entityManager() {
        EntityManager em = new Providerlistitemfacet().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Providerlistitemfacet.countProviderlistitemfacets() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Providerlistitemfacet o", Long.class).getSingleResult();
    }
    
    public static List<Providerlistitemfacet> Providerlistitemfacet.findAllProviderlistitemfacets() {
        return entityManager().createQuery("SELECT o FROM Providerlistitemfacet o", Providerlistitemfacet.class).getResultList();
    }
    
    public static Providerlistitemfacet Providerlistitemfacet.findProviderlistitemfacet(BigDecimal id) {
        if (id == null) return null;
        return entityManager().find(Providerlistitemfacet.class, id);
    }
    
    public static List<Providerlistitemfacet> Providerlistitemfacet.findProviderlistitemfacetEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Providerlistitemfacet o", Providerlistitemfacet.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void Providerlistitemfacet.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Providerlistitemfacet.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Providerlistitemfacet attached = Providerlistitemfacet.findProviderlistitemfacet(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Providerlistitemfacet.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Providerlistitemfacet.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Providerlistitemfacet Providerlistitemfacet.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Providerlistitemfacet merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
