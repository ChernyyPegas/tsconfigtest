// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.elsevier.tsconfig.web;

import com.elsevier.tsconfig.domain.Providercataloglkpref;
import com.elsevier.tsconfig.domain.Providerobject;
import com.elsevier.tsconfig.domain.Providerrelation;
import com.elsevier.tsconfig.web.ProviderrelationController;
import java.io.UnsupportedEncodingException;
import java.math.BigDecimal;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect ProviderrelationController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String ProviderrelationController.create(@Valid Providerrelation providerrelation, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, providerrelation);
            return "providerrelations/create";
        }
        uiModel.asMap().clear();
        providerrelation.persist();
        return "redirect:/providerrelations/" + encodeUrlPathSegment(providerrelation.getObjectid().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String ProviderrelationController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Providerrelation());
        return "providerrelations/create";
    }
    
    @RequestMapping(value = "/{objectid}", produces = "text/html")
    public String ProviderrelationController.show(@PathVariable("objectid") BigDecimal objectid, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("providerrelation", Providerrelation.findProviderrelation(objectid));
        uiModel.addAttribute("itemId", objectid);
        return "providerrelations/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String ProviderrelationController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("providerrelations", Providerrelation.findProviderrelationEntries(firstResult, sizeNo));
            float nrOfPages = (float) Providerrelation.countProviderrelations() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("providerrelations", Providerrelation.findAllProviderrelations());
        }
        addDateTimeFormatPatterns(uiModel);
        return "providerrelations/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String ProviderrelationController.update(@Valid Providerrelation providerrelation, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, providerrelation);
            return "providerrelations/update";
        }
        uiModel.asMap().clear();
        providerrelation.merge();
        return "redirect:/providerrelations/" + encodeUrlPathSegment(providerrelation.getObjectid().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{objectid}", params = "form", produces = "text/html")
    public String ProviderrelationController.updateForm(@PathVariable("objectid") BigDecimal objectid, Model uiModel) {
        populateEditForm(uiModel, Providerrelation.findProviderrelation(objectid));
        return "providerrelations/update";
    }
    
    @RequestMapping(value = "/{objectid}", method = RequestMethod.DELETE, produces = "text/html")
    public String ProviderrelationController.delete(@PathVariable("objectid") BigDecimal objectid, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Providerrelation providerrelation = Providerrelation.findProviderrelation(objectid);
        providerrelation.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/providerrelations";
    }
    
    void ProviderrelationController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("providerrelation_lastmodifieddate_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("providerrelation_createddate_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
    }
    
    void ProviderrelationController.populateEditForm(Model uiModel, Providerrelation providerrelation) {
        uiModel.addAttribute("providerrelation", providerrelation);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("providercataloglkprefs", Providercataloglkpref.findAllProvidercataloglkprefs());
        uiModel.addAttribute("providerobjects", Providerobject.findAllProviderobjects());
    }
    
    String ProviderrelationController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
